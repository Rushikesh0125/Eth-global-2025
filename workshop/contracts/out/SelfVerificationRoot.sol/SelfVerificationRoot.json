{"abi":[{"type":"function","name":"getConfigId","inputs":[{"name":"destinationChainId","type":"bytes32","internalType":"bytes32"},{"name":"userIdentifier","type":"bytes32","internalType":"bytes32"},{"name":"userDefinedData","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"onVerificationSuccess","inputs":[{"name":"output","type":"bytes","internalType":"bytes"},{"name":"userData","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"scope","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"verifySelfProof","inputs":[{"name":"proofPayload","type":"bytes","internalType":"bytes"},{"name":"userContextData","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"error","name":"InvalidDataFormat","inputs":[]},{"type":"error","name":"UnauthorizedCaller","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"getConfigId(bytes32,bytes32,bytes)":"ada1b319","onVerificationSuccess(bytes,bytes)":"8d2d8d6a","scope()":"6e62d0a8","verifySelfProof(bytes,bytes)":"d161802b"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidDataFormat\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedCaller\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"destinationChainId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"userIdentifier\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"userDefinedData\",\"type\":\"bytes\"}],\"name\":\"getConfigId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"output\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onVerificationSuccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scope\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proofPayload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"userContextData\",\"type\":\"bytes\"}],\"name\":\"verifySelfProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Self Team\",\"details\":\"Provides base functionality for verifying and disclosing identity credentials\",\"errors\":{\"InvalidDataFormat()\":[{\"details\":\"Triggered when the provided bytes data doesn't have the expected format\"}],\"UnauthorizedCaller()\":[{\"details\":\"Only the identity verification hub V2 contract can call onVerificationSuccess\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Sets up the immutable reference to the hub contract and generates scope automatically\",\"params\":{\"identityVerificationHubV2Address\":\"The address of the Identity Verification Hub V2\",\"scopeSeed\":\"The scope seed string to be hashed with contract address to generate the scope\"}},\"getConfigId(bytes32,bytes32,bytes)\":{\"details\":\"This function should be overridden by the implementing contract to provide custom configId logic\",\"params\":{\"destinationChainId\":\"The destination chain ID\",\"userDefinedData\":\"The user defined data\",\"userIdentifier\":\"The user identifier\"},\"returns\":{\"_0\":\"The configId\"}},\"onVerificationSuccess(bytes,bytes)\":{\"custom:flow\":\"This function decodes the output and calls the customizable verification hook\",\"custom:security\":\"Only the authorized hub contract can call this function\",\"details\":\"Only callable by the identity verification hub V2 contract for security\",\"params\":{\"output\":\"The verification output data containing disclosed identity information\",\"userData\":\"The user-defined data passed through the verification process\"}},\"scope()\":{\"details\":\"Public view function to access the current scope setting\",\"returns\":{\"_0\":\"The scope value that proofs must match\"}},\"verifySelfProof(bytes,bytes)\":{\"custom:data-format\":\"proofPayload = | 32 bytes attestationId | proofData |userContextData = | 32 bytes destChainId | 32 bytes userIdentifier | data |hubData = | 1 bytes contract version | 31 bytes buffer | 32 bytes scope | 32 bytes attestationId | proofData |\",\"details\":\"Parses relayer data format and validates against contract settings before calling hub V2\",\"params\":{\"proofPayload\":\"Packed data from relayer in format: | 32 bytes attestationId | proof data |\",\"userContextData\":\"User-defined data in format: | 32 bytes destChainId | 32 bytes userIdentifier | data |\"}}},\"stateVariables\":{\"CONTRACT_VERSION\":{\"details\":\"This version is included in the hub data for protocol compatibility\"},\"_identityVerificationHubV2\":{\"details\":\"Immutable reference used for bytes-based proof verification\"},\"_scope\":{\"details\":\"Used to validate that submitted proofs match the expected scope\"}},\"title\":\"SelfVerificationRoot\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidDataFormat()\":[{\"notice\":\"Error thrown when the data format is invalid\"}],\"UnauthorizedCaller()\":[{\"notice\":\"Error thrown when onVerificationSuccess is called by an unauthorized address\"}]},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the SelfVerificationRoot contract\"},\"getConfigId(bytes32,bytes32,bytes)\":{\"notice\":\"Generates a configId for the user\"},\"onVerificationSuccess(bytes,bytes)\":{\"notice\":\"Callback function called upon successful verification by the hub contract\"},\"scope()\":{\"notice\":\"Returns the current scope value\"},\"verifySelfProof(bytes,bytes)\":{\"notice\":\"Verifies a self-proof using the bytes-based interface\"}},\"notice\":\"Abstract base contract to be integrated with self's verification infrastructure\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@selfxyz/contracts/contracts/abstract/SelfVerificationRoot.sol\":\"SelfVerificationRoot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@selfxyz/contracts/=node_modules/@selfxyz/contracts/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"node_modules/@selfxyz/contracts/contracts/abstract/SelfVerificationRoot.sol\":{\"keccak256\":\"0x0651b0019949a8d354a9f376eebc9f70e9af3095307514db8b6de0f436938c5b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://faa8d0e659f9c237717a323ff16ff62fb6423b9add13907ea430a48eec361aa8\",\"dweb:/ipfs/QmanWTs4bSPKmxjWJD1zptCJ4Wjqzd85dD8jZ6wCFzaDv3\"]},\"node_modules/@selfxyz/contracts/contracts/constants/AttestationId.sol\":{\"keccak256\":\"0xc86e1a319db6841e752c9fb9cf03fa6904c67fa0be7a887c4924ad8fba7b35d1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://99972aef813d27f8176b454a2b8c1c2119840fe2b95f22f66464904967b1b2f6\",\"dweb:/ipfs/QmdDSe6UYc1aYrPPruwYtbTxiM4oVuyVvE9uKiK7koZhm9\"]},\"node_modules/@selfxyz/contracts/contracts/constants/CircuitConstantsV2.sol\":{\"keccak256\":\"0x85988897f60f3b291e572868aab05b6b267f9a684c448743a69a0e6142b5df88\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6ccb5c5639bb4996e8fa5cf8fbd70478349569d7819fbd36db44dcf443626f0\",\"dweb:/ipfs/QmafejNq5aecMvATugWdzDkZfkbSdahdUTWSi7Y4YEggys\"]},\"node_modules/@selfxyz/contracts/contracts/interfaces/IDscCircuitVerifier.sol\":{\"keccak256\":\"0x3fe45bb4dfaa288399ac7f2a2f3a096954620dc6da667e1a561e14544f338d1b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dcef8babd319e9f8c4bf9bb3d3a9a26e354930a8c9770108aee4b90a7d7ee5c7\",\"dweb:/ipfs/QmPjuwyui7NS2HcaYYY5ETXBstVv48pD1ofdBwGawrXKcg\"]},\"node_modules/@selfxyz/contracts/contracts/interfaces/IIdentityVerificationHubV2.sol\":{\"keccak256\":\"0x29364427abebd67d3574083e9be92d650471562e60ffbcfdb2c39bc529a26f21\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f7a1f076ac83f1eb6c19ea932827b604d16436b9317290eef2e36f46f8c1677c\",\"dweb:/ipfs/QmcEwf4kirokU4pWZAnJmxLfWXnVeBbs2EMkMZCffD6eGt\"]},\"node_modules/@selfxyz/contracts/contracts/interfaces/IPoseidonT3.sol\":{\"keccak256\":\"0x24cc083681a2ed2cf80e270e935a23ebd429991b3b714b737f05eee6340b8778\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://32d6239e391c35c5bf1586fa7f8d7623e5682e7110082af6ec6481b0514595e3\",\"dweb:/ipfs/QmRxJVBT9qjPNZZc8WaCEgFpCxWMa3hv654eabJ79FGHxK\"]},\"node_modules/@selfxyz/contracts/contracts/interfaces/IRegisterCircuitVerifier.sol\":{\"keccak256\":\"0x79cc50c0de8294f79811e2a878fe07a3f4ac83ed135a10af8c974a89615b7f3b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5f3b3e5ec9dbbcd0a15621a33abb363875d1ecf3e46fb2d8371cc332d0f5992\",\"dweb:/ipfs/Qmb15d6ktr9tMiw9o3p79Cugws549MZArS5DCUsvTDkpTn\"]},\"node_modules/@selfxyz/contracts/contracts/interfaces/ISelfVerificationRoot.sol\":{\"keccak256\":\"0x6728f20379d83a0e80c684a037a1f576044f7c7fff6a88e2adc2c631224be78f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dec4fddb761d0e4ead28223ffa410d773c117a82d5bf5413f0ac2b79e91730f8\",\"dweb:/ipfs/QmXaQx7JWEq5ZPJFsXeMNBVPjewdcXDF566JYayHHBqd5Y\"]},\"node_modules/@selfxyz/contracts/contracts/libraries/Formatter.sol\":{\"keccak256\":\"0x613c99f6cc71b305a3bafab8a40cdea5a69f12e52ec6d82fd745273b38433f9c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://887aba859f8ed6a41792bfa27534cfc23d82eb851a7d47cddd10cac521bb98fb\",\"dweb:/ipfs/QmaBpJCHMGm12onVgfJn7T1wuVAXByA67jvhRyY7euYp9d\"]},\"node_modules/@selfxyz/contracts/contracts/libraries/SelfStructs.sol\":{\"keccak256\":\"0x97dfa385760cf967586b0e39ec7c00475649946d5983950c12923a8298f4e0f7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d5e695bd0636948177b4e851066435b59c2f6d6a95ca43f289f16047b8f5fcca\",\"dweb:/ipfs/QmaLKxhF8FPwbekjTzv515u8EfYHcqDMoNeFRrAiSUfrq7\"]},\"node_modules/@selfxyz/contracts/contracts/libraries/SelfUtils.sol\":{\"keccak256\":\"0x32e8b09a5fa3918ad3aee32b44c6cb87750a041ca0b57bd5bbc87581ab3c0e4c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9a50edee136436709c759f0cab568b035948f5706b98623e8811381a8b1f76fc\",\"dweb:/ipfs/QmUxJfwrUK1wbnDfb7PhitSKGTTHW3zQKujvHS9ujt7CqG\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.28+commit.7893614a"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"InvalidDataFormat"},{"inputs":[],"type":"error","name":"UnauthorizedCaller"},{"inputs":[{"internalType":"bytes32","name":"destinationChainId","type":"bytes32"},{"internalType":"bytes32","name":"userIdentifier","type":"bytes32"},{"internalType":"bytes","name":"userDefinedData","type":"bytes"}],"stateMutability":"view","type":"function","name":"getConfigId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"bytes","name":"output","type":"bytes"},{"internalType":"bytes","name":"userData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"onVerificationSuccess"},{"inputs":[],"stateMutability":"view","type":"function","name":"scope","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"bytes","name":"proofPayload","type":"bytes"},{"internalType":"bytes","name":"userContextData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"verifySelfProof"}],"devdoc":{"kind":"dev","methods":{"constructor":{"details":"Sets up the immutable reference to the hub contract and generates scope automatically","params":{"identityVerificationHubV2Address":"The address of the Identity Verification Hub V2","scopeSeed":"The scope seed string to be hashed with contract address to generate the scope"}},"getConfigId(bytes32,bytes32,bytes)":{"details":"This function should be overridden by the implementing contract to provide custom configId logic","params":{"destinationChainId":"The destination chain ID","userDefinedData":"The user defined data","userIdentifier":"The user identifier"},"returns":{"_0":"The configId"}},"onVerificationSuccess(bytes,bytes)":{"custom:flow":"This function decodes the output and calls the customizable verification hook","custom:security":"Only the authorized hub contract can call this function","details":"Only callable by the identity verification hub V2 contract for security","params":{"output":"The verification output data containing disclosed identity information","userData":"The user-defined data passed through the verification process"}},"scope()":{"details":"Public view function to access the current scope setting","returns":{"_0":"The scope value that proofs must match"}},"verifySelfProof(bytes,bytes)":{"custom:data-format":"proofPayload = | 32 bytes attestationId | proofData |userContextData = | 32 bytes destChainId | 32 bytes userIdentifier | data |hubData = | 1 bytes contract version | 31 bytes buffer | 32 bytes scope | 32 bytes attestationId | proofData |","details":"Parses relayer data format and validates against contract settings before calling hub V2","params":{"proofPayload":"Packed data from relayer in format: | 32 bytes attestationId | proof data |","userContextData":"User-defined data in format: | 32 bytes destChainId | 32 bytes userIdentifier | data |"}}},"version":1},"userdoc":{"kind":"user","methods":{"constructor":{"notice":"Initializes the SelfVerificationRoot contract"},"getConfigId(bytes32,bytes32,bytes)":{"notice":"Generates a configId for the user"},"onVerificationSuccess(bytes,bytes)":{"notice":"Callback function called upon successful verification by the hub contract"},"scope()":{"notice":"Returns the current scope value"},"verifySelfProof(bytes,bytes)":{"notice":"Verifies a self-proof using the bytes-based interface"}},"version":1}},"settings":{"remappings":["@openzeppelin/=lib/openzeppelin-contracts/","@selfxyz/contracts/=node_modules/@selfxyz/contracts/","forge-std/=lib/forge-std/src/"],"optimizer":{"enabled":true,"runs":10000},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"node_modules/@selfxyz/contracts/contracts/abstract/SelfVerificationRoot.sol":"SelfVerificationRoot"},"evmVersion":"paris","libraries":{}},"sources":{"node_modules/@selfxyz/contracts/contracts/abstract/SelfVerificationRoot.sol":{"keccak256":"0x0651b0019949a8d354a9f376eebc9f70e9af3095307514db8b6de0f436938c5b","urls":["bzz-raw://faa8d0e659f9c237717a323ff16ff62fb6423b9add13907ea430a48eec361aa8","dweb:/ipfs/QmanWTs4bSPKmxjWJD1zptCJ4Wjqzd85dD8jZ6wCFzaDv3"],"license":"MIT"},"node_modules/@selfxyz/contracts/contracts/constants/AttestationId.sol":{"keccak256":"0xc86e1a319db6841e752c9fb9cf03fa6904c67fa0be7a887c4924ad8fba7b35d1","urls":["bzz-raw://99972aef813d27f8176b454a2b8c1c2119840fe2b95f22f66464904967b1b2f6","dweb:/ipfs/QmdDSe6UYc1aYrPPruwYtbTxiM4oVuyVvE9uKiK7koZhm9"],"license":"MIT"},"node_modules/@selfxyz/contracts/contracts/constants/CircuitConstantsV2.sol":{"keccak256":"0x85988897f60f3b291e572868aab05b6b267f9a684c448743a69a0e6142b5df88","urls":["bzz-raw://d6ccb5c5639bb4996e8fa5cf8fbd70478349569d7819fbd36db44dcf443626f0","dweb:/ipfs/QmafejNq5aecMvATugWdzDkZfkbSdahdUTWSi7Y4YEggys"],"license":"MIT"},"node_modules/@selfxyz/contracts/contracts/interfaces/IDscCircuitVerifier.sol":{"keccak256":"0x3fe45bb4dfaa288399ac7f2a2f3a096954620dc6da667e1a561e14544f338d1b","urls":["bzz-raw://dcef8babd319e9f8c4bf9bb3d3a9a26e354930a8c9770108aee4b90a7d7ee5c7","dweb:/ipfs/QmPjuwyui7NS2HcaYYY5ETXBstVv48pD1ofdBwGawrXKcg"],"license":"MIT"},"node_modules/@selfxyz/contracts/contracts/interfaces/IIdentityVerificationHubV2.sol":{"keccak256":"0x29364427abebd67d3574083e9be92d650471562e60ffbcfdb2c39bc529a26f21","urls":["bzz-raw://f7a1f076ac83f1eb6c19ea932827b604d16436b9317290eef2e36f46f8c1677c","dweb:/ipfs/QmcEwf4kirokU4pWZAnJmxLfWXnVeBbs2EMkMZCffD6eGt"],"license":"MIT"},"node_modules/@selfxyz/contracts/contracts/interfaces/IPoseidonT3.sol":{"keccak256":"0x24cc083681a2ed2cf80e270e935a23ebd429991b3b714b737f05eee6340b8778","urls":["bzz-raw://32d6239e391c35c5bf1586fa7f8d7623e5682e7110082af6ec6481b0514595e3","dweb:/ipfs/QmRxJVBT9qjPNZZc8WaCEgFpCxWMa3hv654eabJ79FGHxK"],"license":"MIT"},"node_modules/@selfxyz/contracts/contracts/interfaces/IRegisterCircuitVerifier.sol":{"keccak256":"0x79cc50c0de8294f79811e2a878fe07a3f4ac83ed135a10af8c974a89615b7f3b","urls":["bzz-raw://c5f3b3e5ec9dbbcd0a15621a33abb363875d1ecf3e46fb2d8371cc332d0f5992","dweb:/ipfs/Qmb15d6ktr9tMiw9o3p79Cugws549MZArS5DCUsvTDkpTn"],"license":"MIT"},"node_modules/@selfxyz/contracts/contracts/interfaces/ISelfVerificationRoot.sol":{"keccak256":"0x6728f20379d83a0e80c684a037a1f576044f7c7fff6a88e2adc2c631224be78f","urls":["bzz-raw://dec4fddb761d0e4ead28223ffa410d773c117a82d5bf5413f0ac2b79e91730f8","dweb:/ipfs/QmXaQx7JWEq5ZPJFsXeMNBVPjewdcXDF566JYayHHBqd5Y"],"license":"MIT"},"node_modules/@selfxyz/contracts/contracts/libraries/Formatter.sol":{"keccak256":"0x613c99f6cc71b305a3bafab8a40cdea5a69f12e52ec6d82fd745273b38433f9c","urls":["bzz-raw://887aba859f8ed6a41792bfa27534cfc23d82eb851a7d47cddd10cac521bb98fb","dweb:/ipfs/QmaBpJCHMGm12onVgfJn7T1wuVAXByA67jvhRyY7euYp9d"],"license":"MIT"},"node_modules/@selfxyz/contracts/contracts/libraries/SelfStructs.sol":{"keccak256":"0x97dfa385760cf967586b0e39ec7c00475649946d5983950c12923a8298f4e0f7","urls":["bzz-raw://d5e695bd0636948177b4e851066435b59c2f6d6a95ca43f289f16047b8f5fcca","dweb:/ipfs/QmaLKxhF8FPwbekjTzv515u8EfYHcqDMoNeFRrAiSUfrq7"],"license":"MIT"},"node_modules/@selfxyz/contracts/contracts/libraries/SelfUtils.sol":{"keccak256":"0x32e8b09a5fa3918ad3aee32b44c6cb87750a041ca0b57bd5bbc87581ab3c0e4c","urls":["bzz-raw://9a50edee136436709c759f0cab568b035948f5706b98623e8811381a8b1f76fc","dweb:/ipfs/QmUxJfwrUK1wbnDfb7PhitSKGTTHW3zQKujvHS9ujt7CqG"],"license":"MIT"}},"version":1},"id":15}