{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-98678c847189e6f6aec2f91b8143892d90b7db1e",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/OrderRegistry.sol": "project/contracts/OrderRegistry.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/AccessControl.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {IERC165, ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/access/IAccessControl.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\n\npragma solidity >=0.8.4;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted to signal this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/ERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "project/contracts/OrderRegistry.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ncontract OrderRegistry is AccessControl {\n    \n    bytes32 public constant RECORDER_ROLE = keccak256(\"RECORDER_ROLE\");\n    \n    enum OrderStatus {\n        CREATED,           // 0: Order created\n        PAID,              // 1: Payment completed\n        SHIPPED,           // 2: Order shipped\n        DELIVERED,         // 3: Successfully delivered\n        RETURNED,          // 4: Product returned\n        DELIVERY_FAILED,   // 5: Delivery failed (absent/refused)\n        COMPLETED,         // 6: Order completed (no return)\n        CANCELLED          // 7: Order cancelled\n    }\n    \n    enum DeliveryFailureReason {\n        NONE,              // 0: No failure\n        USER_ABSENT,       // 1: User was absent\n        USER_REFUSED,      // 2: User refused delivery\n        ADDRESS_INVALID,   // 3: Invalid address\n        OTHER              // 4: Other reasons\n    }\n    \n    struct Order {\n        bytes32 orderId;\n        bytes32 userId;\n        uint256 orderValue;\n        uint256 createdAt;\n        uint256 updatedAt;\n        OrderStatus status;\n        DeliveryFailureReason failureReason;\n        string productCategory;\n        uint8 deliveryAttempts;\n        uint256 returnedAt;\n        bool isActive;\n        string destination;\n    }\n    \n    // Mappings\n    mapping(bytes32 => Order) public orders;\n    mapping(bytes32 => bytes32[]) public userOrders; // userId => orderIds[]\n    mapping(bytes32 => uint256) public userOrderCount;\n    \n    // Events\n    event OrderCreated(\n        bytes32 indexed orderId,\n        bytes32 indexed userId,\n        uint256 orderValue,\n        string productCategory\n    );\n    \n    event OrderStatusUpdated(\n        bytes32 indexed orderId,\n        bytes32 indexed userId,\n        OrderStatus oldStatus,\n        OrderStatus newStatus,\n        uint256 timestamp\n    );\n    \n    event DeliveryFailed(\n        bytes32 indexed orderId,\n        bytes32 indexed userId,\n        DeliveryFailureReason reason,\n        uint8 attemptNumber\n    );\n    \n    event ProductReturned(\n        bytes32 indexed orderId,\n        bytes32 indexed userId,\n        uint256 returnedAt\n    );\n    \n    constructor(address recorder) {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(RECORDER_ROLE, recorder);\n    }\n    \n    modifier onlyRecorder() {\n        require(hasRole(RECORDER_ROLE, msg.sender), \"Only recorder can perform this action\");\n        _;\n    }\n    \n    modifier orderExists(bytes32 orderId) {\n        require(orders[orderId].isActive, \"Order does not exist\");\n        _;\n    }\n    \n    function createOrder(\n        bytes32 orderId,\n        bytes32 userId,\n        uint256 orderValue,\n        string memory productCategory,\n        string memory destination\n    ) external onlyRecorder {\n        require(!orders[orderId].isActive, \"Order already exists\");\n        require(orderValue > 0, \"Order value must be greater than 0\");\n        \n        Order memory newOrder = Order({\n            orderId: orderId,\n            userId: userId,\n            orderValue: orderValue,\n            createdAt: block.timestamp,\n            updatedAt: block.timestamp,\n            status: OrderStatus.CREATED,\n            failureReason: DeliveryFailureReason.NONE,\n            productCategory: productCategory,\n            deliveryAttempts: 0,\n            returnedAt: 0,\n            isActive: true,\n            destination: destination\n        });\n        \n        orders[orderId] = newOrder;\n        userOrders[userId].push(orderId);\n        userOrderCount[userId]++;\n        \n        emit OrderCreated(orderId, userId, orderValue, productCategory);\n    }\n    \n    function updateOrderStatus(\n        bytes32 orderId,\n        OrderStatus newStatus\n    ) external onlyRecorder orderExists(orderId) {\n        Order storage order = orders[orderId];\n        OrderStatus oldStatus = order.status;\n        \n        require(oldStatus != newStatus, \"Status is already set\");\n        require(_isValidStatusTransition(oldStatus, newStatus), \"Invalid status transition\");\n        \n        order.status = newStatus;\n        order.updatedAt = block.timestamp;\n        \n        emit OrderStatusUpdated(orderId, order.userId, oldStatus, newStatus, block.timestamp);\n    }\n    \n    function recordDeliveryFailure(\n        bytes32 orderId,\n        DeliveryFailureReason reason\n    ) external onlyRecorder orderExists(orderId) {\n        Order storage order = orders[orderId];\n        \n        require(order.status == OrderStatus.SHIPPED, \"Order must be in shipped status\");\n        \n        order.status = OrderStatus.DELIVERY_FAILED;\n        order.failureReason = reason;\n        order.deliveryAttempts++;\n        order.updatedAt = block.timestamp;\n        \n        emit DeliveryFailed(orderId, order.userId, reason, order.deliveryAttempts);\n    }\n    \n    function recordProductReturn(\n        bytes32 orderId\n    ) external onlyRecorder orderExists(orderId) {\n        Order storage order = orders[orderId];\n        \n        require(order.status == OrderStatus.DELIVERED, \"Order must be delivered to return\");\n        \n        order.status = OrderStatus.RETURNED;\n        order.returnedAt = block.timestamp;\n        order.updatedAt = block.timestamp;\n        \n        emit ProductReturned(orderId, order.userId, block.timestamp);\n    }\n    \n    function markOrderCompleted(bytes32 orderId) external onlyRecorder orderExists(orderId) {\n        Order storage order = orders[orderId];\n        \n        require(\n            order.status == OrderStatus.DELIVERED || order.status == OrderStatus.PAID,\n            \"Order must be delivered or paid to complete\"\n        );\n        \n        order.status = OrderStatus.COMPLETED;\n        order.updatedAt = block.timestamp;\n        \n        emit OrderStatusUpdated(orderId, order.userId, OrderStatus.DELIVERED, OrderStatus.COMPLETED, block.timestamp);\n    }\n    \n    // View functions for AI analysis\n    function getUserOrderHistory(bytes32 userId) external view returns (Order[] memory) {\n        bytes32[] memory orderIds = userOrders[userId];\n        Order[] memory userOrderHistory = new Order[](orderIds.length);\n        \n        for (uint256 i = 0; i < orderIds.length; i++) {\n            userOrderHistory[i] = orders[orderIds[i]];\n        }\n        \n        return userOrderHistory;\n    }\n    \n    function getUserOrdersPaginated(\n        bytes32 userId,\n        uint256 offset,\n        uint256 limit\n    ) external view returns (Order[] memory, uint256 total) {\n        bytes32[] memory orderIds = userOrders[userId];\n        uint256 totalOrders = orderIds.length;\n        \n        if (offset >= totalOrders) {\n            return (new Order[](0), totalOrders);\n        }\n        \n        uint256 end = offset + limit;\n        if (end > totalOrders) {\n            end = totalOrders;\n        }\n        \n        uint256 resultLength = end - offset;\n        Order[] memory result = new Order[](resultLength);\n        \n        for (uint256 i = 0; i < resultLength; i++) {\n            result[i] = orders[orderIds[offset + i]];\n        }\n        \n        return (result, totalOrders);\n    }\n    \n    function getUserBehaviorStats(bytes32 userId) external view returns (\n        uint256 totalOrders,\n        uint256 completedOrders,\n        uint256 returnedOrders,\n        uint256 deliveryFailures,\n        uint256 totalOrderValue,\n        uint256 avgOrderValue\n    ) {\n        bytes32[] memory orderIds = userOrders[userId];\n        totalOrders = orderIds.length;\n        \n        if (totalOrders == 0) {\n            return (0, 0, 0, 0, 0, 0);\n        }\n        \n        for (uint256 i = 0; i < totalOrders; i++) {\n            Order memory order = orders[orderIds[i]];\n            totalOrderValue += order.orderValue;\n            \n            if (order.status == OrderStatus.COMPLETED || order.status == OrderStatus.DELIVERED) {\n                completedOrders++;\n            }\n            \n            if (order.status == OrderStatus.RETURNED) {\n                returnedOrders++;\n            }\n            \n            if (order.status == OrderStatus.DELIVERY_FAILED) {\n                deliveryFailures++;\n            }\n        }\n        \n        avgOrderValue = totalOrderValue / totalOrders;\n    }\n    \n    function getOrdersByStatus(\n        bytes32 userId,\n        OrderStatus status\n    ) external view returns (Order[] memory) {\n        bytes32[] memory orderIds = userOrders[userId];\n        \n        // First pass: count matching orders\n        uint256 matchCount = 0;\n        for (uint256 i = 0; i < orderIds.length; i++) {\n            if (orders[orderIds[i]].status == status) {\n                matchCount++;\n            }\n        }\n        \n        // Second pass: collect matching orders\n        Order[] memory matchingOrders = new Order[](matchCount);\n        uint256 currentIndex = 0;\n        \n        for (uint256 i = 0; i < orderIds.length; i++) {\n            if (orders[orderIds[i]].status == status) {\n                matchingOrders[currentIndex] = orders[orderIds[i]];\n                currentIndex++;\n            }\n        }\n        \n        return matchingOrders;\n    }\n    \n    function getRecentOrders(\n        bytes32 userId,\n        uint256 daysSince\n    ) external view returns (Order[] memory) {\n        bytes32[] memory orderIds = userOrders[userId];\n        uint256 cutoffTime = block.timestamp - (daysSince * 1 days);\n        \n        // First pass: count recent orders\n        uint256 recentCount = 0;\n        for (uint256 i = 0; i < orderIds.length; i++) {\n            if (orders[orderIds[i]].createdAt >= cutoffTime) {\n                recentCount++;\n            }\n        }\n        \n        // Second pass: collect recent orders\n        Order[] memory recentOrders = new Order[](recentCount);\n        uint256 currentIndex = 0;\n        \n        for (uint256 i = 0; i < orderIds.length; i++) {\n            if (orders[orderIds[i]].createdAt >= cutoffTime) {\n                recentOrders[currentIndex] = orders[orderIds[i]];\n                currentIndex++;\n            }\n        }\n        \n        return recentOrders;\n    }\n    \n    function getOrder(bytes32 orderId) external view returns (Order memory) {\n        require(orders[orderId].isActive, \"Order does not exist\");\n        return orders[orderId];\n    }\n    \n    // Internal function to validate status transitions\n    function _isValidStatusTransition(\n        OrderStatus from,\n        OrderStatus to\n    ) internal pure returns (bool) {\n        if (from == OrderStatus.CREATED) {\n            return to == OrderStatus.PAID || to == OrderStatus.CANCELLED;\n        }\n        if (from == OrderStatus.PAID) {\n            return to == OrderStatus.SHIPPED || to == OrderStatus.CANCELLED;\n        }\n        if (from == OrderStatus.SHIPPED) {\n            return to == OrderStatus.DELIVERED || to == OrderStatus.DELIVERY_FAILED || to == OrderStatus.CANCELLED;\n        }\n        if (from == OrderStatus.DELIVERED) {\n            return to == OrderStatus.RETURNED || to == OrderStatus.COMPLETED;\n        }\n        if (from == OrderStatus.DELIVERY_FAILED) {\n            return to == OrderStatus.SHIPPED || to == OrderStatus.CANCELLED;\n        }\n        \n        return false;\n    }\n    \n    // Admin functions\n    function grantRecorderRole(address recorder) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        grantRole(RECORDER_ROLE, recorder);\n    }\n    \n    function revokeRecorderRole(address recorder) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        revokeRole(RECORDER_ROLE, recorder);\n    }\n    \n    // Emergency functions\n    function deactivateOrder(bytes32 orderId) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(orders[orderId].isActive, \"Order does not exist\");\n        orders[orderId].isActive = false;\n    }\n}"
      }
    }
  }
}